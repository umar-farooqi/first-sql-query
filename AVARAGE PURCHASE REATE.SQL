-- THIS QUERY INCLUDE CLOSING BALANCE ----

---SALE----------


WITH SHIPMENTS AS (
  SELECT so_id AS shipment_so_id
  FROM AB_SO_ORDER_HEAD
  WHERE so_type = 'SALE SHIPMENT'
    AND status  = 'Y'
    AND org_id  = :GV_ORG_ID
),
STAGE_BY_SHIPMENT AS (
  SELECT
    s.shipment_so_id,
    va.va_so_id,
    pl.pl_so_id,
    dis.dispatched_so_id,
    inv.invoice_so_id
  FROM SHIPMENTS s

  LEFT JOIN (
    SELECT so_ids AS parent_so_id,
           MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS va_so_id
    FROM AB_SO_ORDER_HEAD
    WHERE so_type = 'VEHICLE ARRIVED'
      AND status  = 'Y'
      AND org_id  = :GV_ORG_ID
    GROUP BY so_ids
  ) va ON va.parent_so_id = s.shipment_so_id

  LEFT JOIN (
    SELECT so_ids AS parent_so_id,
           MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS pl_so_id
    FROM AB_SO_ORDER_HEAD
    WHERE so_type = 'SALE PENDING LOADING'
      AND status  = 'Y'
      AND org_id  = :GV_ORG_ID
    GROUP BY so_ids
  ) pl ON pl.parent_so_id = s.shipment_so_id

  LEFT JOIN (
    SELECT so_ids AS parent_so_id,
           MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS dispatched_so_id
    FROM AB_SO_ORDER_HEAD
    WHERE so_type = 'SO DISPATCHED'
      AND status  = 'Y'
      AND org_id  = :GV_ORG_ID
    GROUP BY so_ids
  ) dis ON dis.parent_so_id = pl.pl_so_id

  LEFT JOIN (
    SELECT so_ids AS parent_so_id,
           MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS invoice_so_id
    FROM AB_SO_ORDER_HEAD
    WHERE so_type = 'SALE INVOICE'
      AND status  = 'Y'
      AND org_id  = :GV_ORG_ID
    GROUP BY so_ids
  ) inv ON inv.parent_so_id = dis.dispatched_so_id
),
REACHED_DESTINATION AS (
  SELECT
    so_ids AS dispatched_so_id,
    MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS rd_so_id
  FROM AB_SO_ORDER_HEAD
  WHERE so_type = 'REACHED DESTINATION'
    AND status  = 'Y'
    AND org_id  = :GV_ORG_ID
  GROUP BY so_ids
),
ACK AS (
  SELECT
    so_ids AS dispatched_so_id,
    MAX(so_id) KEEP (DENSE_RANK LAST ORDER BY created_on) AS ack_so_id
  FROM AB_SO_ORDER_HEAD
  WHERE so_type = 'SALE INVOICE ACKNOWLEDGED'
    AND status  = 'Y'
    AND org_id  = :GV_ORG_ID
  GROUP BY so_ids
),
SALE_ALL_QUERY AS (
SELECT
    C.ITEM_ID,
    C.PRODUCT_NAME,
    SUM(C.NO_BAGS) AS SUM_BAG_RATE,
    SUM(C.TOTAL_AMOUNT) AS SUM_TOTAL_AMOUNT,
    ROUND(NVL( SUM(C.TOTAL_AMOUNT),0) / NVL(SUM(C.NO_BAGS),0)) AVG_SAL_RATE
FROM 
    TABLE(AB_SALE_ORDER_PKG.SALE_ORDER_SHIPMENT(:GV_ORG_ID)) C
        LEFT JOIN STAGE_BY_SHIPMENT S ON S.SHIPMENT_SO_ID = C.SHIPMENT_ID        
        LEFT JOIN REACHED_DESTINATION RD ON RD.DISPATCHED_SO_ID  = C.SHIPMENT_IDD   
        LEFT JOIN ACK ON ACK.DISPATCHED_SO_ID  = C.SHIPMENT_IDD
        LEFT JOIN AB_FIN_COA AFC ON AFC.COA_ID = C.FREIGHT_PARTY_ID
WHERE
      C.ITEM_ID = NVL(:P894_PRODUCT_NAME,C.ITEM_ID)
   AND TRUNC(C.SHIPMENT_DATE) BETWEEN NVL(TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY'), TRUNC(C.SHIPMENT_DATE))
     AND NVL(TO_DATE(:P894_TO_DATE, 'DD-MON-YYYY'), TRUNC(C.SHIPMENT_DATE))
     and C.STATUS = NVL(:P894_ORDER_TYPE,C.STATUS)
GROUP BY 
    C.ITEM_ID,
    C.PRODUCT_NAME
ORDER BY 
    C.PRODUCT_NAME
),
   ----------------PURCHASE---------------
 PURCHASE_QUERY AS (
SELECT
    ITEM_ID PUR_ITEM_ID,
    ITEM_NAME PUR_ITEM_NAME,
    SUM(NVL(INVOICE_BAGS, 0)) AS PUR_TOTAL_INVOICE_BAGS,
    ROUND(SUM(NVL(NET_AMOUNT, 0)))   AS PUR_TOTAL_NET_AMOUNT,
      ROUND(
        SUM(NVL(NET_AMOUNT, 0)) / NULLIF(SUM(NVL(INVOICE_BAGS, 0)), 0),
        2
    ) AS PUR_AVG_RATE
FROM
    TABLE(AB_PURCHASE_ORDER_PKG.PURCHASE_ORDER_INVOICE(:GV_ORG_ID)) C
WHERE
       PO_ID IS NOT NULL
  AND  PURCHASING_TYPE = NVL(:P894_PURCHASE_TYPE,PURCHASING_TYPE)
  AND ITEM_ID = NVL(:P894_PRODUCT_NAME,ITEM_ID)
  AND  TRUNC(C.INVOICE_DATE) BETWEEN 
           NVL(TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY'), TRUNC(C.INVOICE_DATE))
      AND NVL(TO_DATE(:P894_TO_DATE, 'DD-MON-YYYY'), TRUNC(C.INVOICE_DATE))
GROUP BY
    ITEM_ID,
    ITEM_NAME
ORDER BY
    ITEM_NAME
 ),

--- PREVIOUS PERIOD DATA (PURCHASES) -------------------------
PREV_PURCHASE_QUERY AS (
SELECT
    ITEM_ID PUR_ITEM_ID,
    ITEM_NAME PUR_ITEM_NAME,
    SUM(NVL(INVOICE_BAGS, 0)) AS PUR_TOTAL_INVOICE_BAGS,
    ROUND(SUM(NVL(NET_AMOUNT, 0)))   AS PUR_TOTAL_NET_AMOUNT
FROM
    TABLE(AB_PURCHASE_ORDER_PKG.PURCHASE_ORDER_INVOICE(:GV_ORG_ID)) C
WHERE
       PO_ID IS NOT NULL
  AND  PURCHASING_TYPE = NVL(:P894_PURCHASE_TYPE,PURCHASING_TYPE)
  AND ITEM_ID = NVL(:P894_PRODUCT_NAME,ITEM_ID)
  AND  TRUNC(C.INVOICE_DATE) < TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY')
GROUP BY
    ITEM_ID,
    ITEM_NAME
),

--- PREVIOUS PERIOD DATA (SALES) -------------------------
PREV_SALE_QUERY AS (
SELECT
    C.ITEM_ID,
    C.PRODUCT_NAME,
    SUM(C.NO_BAGS) AS SUM_BAG_RATE,
    SUM(C.TOTAL_AMOUNT) AS SUM_TOTAL_AMOUNT
FROM 
    TABLE(AB_SALE_ORDER_PKG.SALE_ORDER_SHIPMENT(:GV_ORG_ID)) C
        LEFT JOIN STAGE_BY_SHIPMENT S ON S.SHIPMENT_SO_ID = C.SHIPMENT_ID        
        LEFT JOIN REACHED_DESTINATION RD ON RD.DISPATCHED_SO_ID  = C.SHIPMENT_IDD   
        LEFT JOIN ACK ON ACK.DISPATCHED_SO_ID  = C.SHIPMENT_IDD
        LEFT JOIN AB_FIN_COA AFC ON AFC.COA_ID = C.FREIGHT_PARTY_ID
WHERE
      C.ITEM_ID = NVL(:P894_PRODUCT_NAME,C.ITEM_ID)
   AND TRUNC(C.SHIPMENT_DATE) < TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY')
   and C.STATUS = NVL(:P894_ORDER_TYPE,C.STATUS)
GROUP BY 
    C.ITEM_ID,
    C.PRODUCT_NAME
),

--- PREVIOUS PERIOD OPENING STOCK -------------------------
PREV_OPENING_QUERY AS (
    SELECT 
    PO.ITEM_IDD AS ITEM_ID,
    IM.ITEM_NAME || ' (' || IM.PACKING_SIZE || ' ' || IM.UNIT || ' ' || IM.PACKING || ')' AS ITEM_NAME, 
    SUM(NVL(POD.CHANGE_BAGS,0)) AS Opening_Qty,
    SUM(NVL(POD.NET_AMOUNT,0)) AS TOTAL_NET_AMOUNT
FROM 
    AB_PO_PURCHASE_ORDER PO
    JOIN AB_ITEMS_MASTER IM ON IM.ITEM_ID = PO.ITEM_IDD
    JOIN AB_PO_PURCHASE_ORDER_DET POD ON POD.PO_ID = PO.PO_ID
 
WHERE 
    PO.PO_TYPE = 'OPENING PRODUCT'
    AND PO.ORG_ID = :GV_ORG_ID
    AND POD.STATUS = 'Y'
    AND TRUNC(NVL(PO.TRANSACTION_DATE, PO.CREATED_ON)) < TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY')
GROUP BY 
    PO.ITEM_IDD,
    IM.ITEM_NAME,
    IM.PACKING_SIZE,
    IM.UNIT,
    IM.PACKING
),

--- CLOSING BALANCE FROM PREVIOUS PERIOD -------------------------
PREVIOUS_PERIOD_CLOSING AS (
    SELECT 
        COALESCE(PPQ.PUR_ITEM_ID, PSQ.ITEM_ID, POQ.ITEM_ID) AS ITEM_ID,
        COALESCE(PPQ.PUR_ITEM_NAME, PSQ.PRODUCT_NAME, POQ.ITEM_NAME) AS ITEM_NAME,
        NVL(POQ.Opening_Qty, 0) + NVL(PPQ.PUR_TOTAL_INVOICE_BAGS, 0) - NVL(PSQ.SUM_BAG_RATE, 0) AS CLOSING_QTY,
        NVL(POQ.TOTAL_NET_AMOUNT, 0) + NVL(PPQ.PUR_TOTAL_NET_AMOUNT, 0) - NVL(PSQ.SUM_TOTAL_AMOUNT, 0) AS CLOSING_AMOUNT,
        CASE 
            WHEN NVL(POQ.Opening_Qty, 0) + NVL(PPQ.PUR_TOTAL_INVOICE_BAGS, 0) - NVL(PSQ.SUM_BAG_RATE, 0) = 0 THEN 0
            ELSE (NVL(POQ.TOTAL_NET_AMOUNT, 0) + NVL(PPQ.PUR_TOTAL_NET_AMOUNT, 0) - NVL(PSQ.SUM_TOTAL_AMOUNT, 0)) / 
                 (NVL(POQ.Opening_Qty, 0) + NVL(PPQ.PUR_TOTAL_INVOICE_BAGS, 0) - NVL(PSQ.SUM_BAG_RATE, 0))
        END AS CLOSING_AVG_RATE
    FROM
        PREV_PURCHASE_QUERY PPQ
        FULL OUTER JOIN PREV_SALE_QUERY PSQ ON PPQ.PUR_ITEM_ID = PSQ.ITEM_ID
        LEFT JOIN PREV_OPENING_QUERY POQ ON POQ.ITEM_ID = COALESCE(PPQ.PUR_ITEM_ID, PSQ.ITEM_ID)
),

--- OPENING STOCK-------------------------
OPENING_QUERY AS (
    SELECT 
        PPC.ITEM_ID AS ITEM_IDD,
        PPC.ITEM_NAME,
        NVL(PPC.CLOSING_QTY, 0) AS Opening_Qty,
        NVL(PPC.CLOSING_AMOUNT, 0) AS TOTAL_NET_AMOUNT,
        NVL(PPC.CLOSING_AVG_RATE, 0) AS Opening_Avg_Rate
    FROM 
        PREVIOUS_PERIOD_CLOSING PPC
    
    UNION ALL
    
    SELECT 
        PO.ITEM_IDD,
        IM.ITEM_NAME || ' (' || IM.PACKING_SIZE || ' ' || IM.UNIT || ' ' || IM.PACKING || ')' AS ITEM_NAME, 
        SUM(NVL(POD.CHANGE_BAGS,0)) AS Opening_Qty,
        SUM(NVL(POD.NET_AMOUNT,0)) AS TOTAL_NET_AMOUNT,
        ROUND(NULLIF(NVL(SUM(POD.NET_AMOUNT),0),0) / NULLIF(NVL(SUM(POD.CHANGE_BAGS),0),0),2) AS Opening_Avg_Rate
    FROM 
        AB_PO_PURCHASE_ORDER PO
        JOIN AB_ITEMS_MASTER IM ON IM.ITEM_ID = PO.ITEM_IDD
        JOIN AB_PO_PURCHASE_ORDER_DET POD ON POD.PO_ID = PO.PO_ID
    
    WHERE 
        PO.PO_TYPE = 'OPENING PRODUCT'
        AND PO.ORG_ID = :GV_ORG_ID
        AND POD.STATUS = 'Y'
        AND TRUNC(NVL(PO.TRANSACTION_DATE, PO.CREATED_ON)) BETWEEN 
            NVL(TO_DATE(:P894_FROM_DATE, 'DD-MON-YYYY'), TRUNC(NVL(PO.TRANSACTION_DATE, PO.CREATED_ON)))  
            AND NVL(TO_DATE(:P894_TO_DATE, 'DD-MON-YYYY'), TRUNC(NVL(PO.TRANSACTION_DATE, PO.CREATED_ON)))
        AND NOT EXISTS (
            SELECT 1 FROM PREVIOUS_PERIOD_CLOSING PPC 
            WHERE PPC.ITEM_ID = PO.ITEM_IDD
        )
    GROUP BY 
        PO.ITEM_IDD,
        IM.ITEM_NAME,
        IM.PACKING_SIZE,
        IM.UNIT,
        IM.PACKING
 )

 ----------------MAIN QUERY--------------------------------

SELECT 
COALESCE(PQ.PUR_ITEM_ID,SQ.ITEM_ID,OQ.ITEM_IDD) ITEM_ID,
COALESCE(PQ.PUR_ITEM_NAME,SQ.PRODUCT_NAME,OQ.ITEM_NAME) PRODUCT_NAME,
NVL(SQ.SUM_BAG_RATE,0) SALE_BAG,
NVL(SQ.AVG_SAL_RATE,0) SALE_AVG_RATE,
NVL(SQ.SUM_TOTAL_AMOUNT,0) SALE_TOTAL_AMOUNT,
NVL(PQ.PUR_TOTAL_INVOICE_BAGS,0) PUR_BAGS,
NVL(PQ.PUR_AVG_RATE,0) PURCHASE_AVG_AMOUNT,
NVL(PQ.PUR_TOTAL_NET_AMOUNT,0) AS PURCHASE_TOTAL_AMOUNT,
NVL(NULLIF(NVL(SQ.AVG_SAL_RATE,0),0) - NULLIF(NVL(PQ.PUR_AVG_RATE,0),0),0)AS TOTAL_PROFIT_LOSS,

--- OPENING STOCK ----------------------
NVL(OQ.Opening_Qty,0) AS OPENING_QTY,
NVL(OQ.Opening_Avg_Rate,0) AS OPENING_AVG_RATE,
NVL(OQ.TOTAL_NET_AMOUNT,0) AS OPENING_TOTAL_NET_AMOUNT,

---- TOTAL PROFIT/LOSS QUEYR --------------------
NVL(NVL(PQ.PUR_TOTAL_INVOICE_BAGS,0) + NVL(OQ.Opening_Qty,0),0) AS TOTAL_PROFIT_QTY,
NVL(NVL(PQ.PUR_TOTAL_NET_AMOUNT,0) + NVL(OQ.TOTAL_NET_AMOUNT,0),0)  AS TOTAL_PROFIT_LOSS_AMOUNT,

NVL(NULLIF(NVL(NVL(PQ.PUR_TOTAL_NET_AMOUNT,0) + NVL(OQ.TOTAL_NET_AMOUNT,0),0),0) 
/
NULLIF(NVL(NVL(PQ.PUR_TOTAL_INVOICE_BAGS,0) + NVL(OQ.Opening_Qty,0),0),0),0) AS TOTAL_AVG_AMOUNT,

NULLIF(NVL(SQ.AVG_SAL_RATE,0) - (NVL(NULLIF(NVL(NVL(PQ.PUR_TOTAL_NET_AMOUNT,0) + NVL(OQ.TOTAL_NET_AMOUNT,0),0),0) 
/
NULLIF(NVL(NVL(PQ.PUR_TOTAL_INVOICE_BAGS,0) + NVL(OQ.Opening_Qty,0),0),0),0)),0) as PROFIT_LOSS,

NVL(NVL(PQ.PUR_TOTAL_INVOICE_BAGS,0) + NVL(OQ.Opening_Qty,0),0)
-
NVL(SQ.SUM_BAG_RATE,0)  AS CLOSING_BALANCE

FROM   
PURCHASE_QUERY PQ
FULL OUTER JOIN   SALE_ALL_QUERY  SQ ON PQ.PUR_ITEM_ID = SQ.ITEM_ID
LEFT JOIN   OPENING_QUERY   OQ ON OQ.ITEM_IDD    = COALESCE(PQ.PUR_ITEM_ID, SQ.ITEM_ID)
