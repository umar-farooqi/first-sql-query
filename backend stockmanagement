WITH STOCK_DETAIL AS (
    SELECT  
        WAREHOUSE_ID,
        WAREHOUSE_NAME AS  WAREHOUSE_NAME,
        ITEM_ID ITEM_ID, 
         (ITEM_NAME) AS ITEM_NAME,
        MAX(CREATED_ON) CREATED_ON, -- Ensure ITEM_NAME is unique for each ITEM_ID
        SUM(GRN_BAGS) AS GRN_BAGS, 
        SUM(OPENING_BAGS) AS OPENING_BAGS, 
        SUM(AMANAT_BAGS) AS AMANAT_BAGS, 
        (NVL(SUM(OPENING_BAGS), 0) + NVL(SUM(GRN_BAGS), 0) + NVL(SUM(AMANAT_BAGS), 0)) AS TOTAL_AVAILABLE_STOCK
    FROM (
        SELECT 
            G.WAREHOUSE_ID,
            G.WAREHOUSE_NAME,
            G.ITEM_ID, 
            G.ITEM_NAME,
            G.CREATED_ON,
            SUM(G.GRN_BAGS) AS GRN_BAGS,
            0 AS OPENING_BAGS,
            0 AS AMANAT_BAGS
        FROM 
            TABLE(AB_GENERAL_PACKAGE.GRN_STOCK_INWARD(:GV_ORG_ID)) G 
        WHERE 
            G.DET_TYPE = 'GRN Stock'
        GROUP BY 
            G.WAREHOUSE_ID,
            G.WAREHOUSE_NAME,
            G.ITEM_ID, 
            G.ITEM_NAME,
            G.CREATED_ON

        UNION ALL

        SELECT 
            WAREHOUSE_ID,
            WAREHOUSE_NAME,
            ITEM_ID, 
            ITEM_NAME, 
            CREATED_ON,
            0 AS GRN_BAGS, 
            SUM(GRN_BAGS) AS OPENING_BAGS, 
            0 AS AMANAT_BAGS
        FROM 
            TABLE(AB_GENERAL_PACKAGE.GRN_STOCK_INWARD(:GV_ORG_ID))
        WHERE 
            DET_TYPE = 'Opening Stock'
        GROUP BY 
            WAREHOUSE_ID,
            WAREHOUSE_NAME,
            ITEM_ID, 
            ITEM_NAME,
           CREATED_ON

        UNION ALL

        SELECT 
            AMT.WAREHOUSE_ID, 
            AMT.WAREHOUSE_NAME, 
            AMT.ITEM_ID, 
            AMT.ITEM_NAME,
            AMT.CREATED_ON, 
            0 AS GRN_BAGS, 
            0 AS OPENING_BAGS, 
            SUM(AMT.AMANAT_BAGS) AS AMANAT_BAGS
        FROM 
            TABLE(AB_GENERAL_PACKAGE.AMANAT_INWARD(:GV_ORG_ID)) AMT
        GROUP BY 
            AMT.WAREHOUSE_ID, 
            AMT.WAREHOUSE_NAME, 
            AMT.ITEM_ID, 
            AMT.ITEM_NAME,
            AMT.CREATED_ON
    ) 
    GROUP BY 
       WAREHOUSE_ID,
       WAREHOUSE_NAME,
       ITEM_ID,
       ITEM_NAME
        
),
AMANAT_OUT AS (
           SELECT    
              
                 POD.WAREHOUSE_ID AS WAREHOUSE_ID,
                 MAX(CASE WHEN ASR.REG_TYPE = 'WAREHOUSE' AND ASR.SR_ID = POD.WAREHOUSE_ID THEN ASR.REG_NAME END) AS WAREHOUSE_NAME,

               
                  SUM(CHANGE_BAGS) AS  AMANAT_STOCK_OUT
          
        FROM
                            AB_ITEMS_MASTER ITM          
                JOIN   AB_PO_PURCHASE_ORDER_DET POD ON POD.ITEM_ID=ITM.ITEM_ID
                JOIN   AB_PO_PURCHASE_ORDER PO ON PO.PO_ID=POD.PO_ID
                JOIN   AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = POD.WAREHOUSE_ID
        WHERE
                        PO.PO_TYPE='AMANAT OUT'
                        AND PO.ORG_ID=:GV_ORG_ID
         GROUP BY POD.WAREHOUSE_ID ,
                 ASR.REG_NAME--,
               


),

SALE_ORDER AS (
    SELECT
        SOD.WAREHOUSE_ID,
        MAX(CASE WHEN ASR.REG_TYPE = 'WAREHOUSE' AND ASR.SR_ID = SOD.WAREHOUSE_ID THEN ASR.REG_NAME END) AS WAREHOUSE_NAME,
        NVL(SUM(SOD.NO_BAGS), 0) AS ORDER_BAGS
    FROM
        AB_SO_ORDER_HEAD HEAD
        JOIN AB_SO_ORDER_DET SOD ON SOD.SO_ID = HEAD.SO_ID
        JOIN AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = SOD.WAREHOUSE_ID
    WHERE
        SOD.SOD_TYPE = 'SALE ORDER DET'
        AND SOD.ORG_ID = :GV_ORG_ID
        -- AND 
        --  TRUNC(C.CREATED_ON) BETWEEN NVL(TO_DATE(:P209_FROM_DATE, 'DD-MON-YYYY'), 
        --              TRUNC(C.CREATED_ON) )  AND NVL(TO_DATE(:P209_TO_DATE, 'DD-MON-YYYY'),TRUNC(C.CREATED_ON) )

    GROUP BY
        SOD.WAREHOUSE_ID
),
SHIPMENT_BAGS AS (
    SELECT
        HEAD.FROM_WAREHOUSE_ID AS WAREHOUSE_ID,
        MAX(CASE WHEN ASR.REG_TYPE = 'WAREHOUSE' AND ASR.SR_ID = HEAD.FROM_WAREHOUSE_ID THEN ASR.REG_NAME END) AS WAREHOUSE_NAME,
        NVL(SUM(SOD.NO_BAGS), 0) AS LIFT_BAGS
    FROM
        AB_SO_ORDER_HEAD HEAD
        JOIN AB_SO_ORDER_DET SOD ON SOD.SO_ID = HEAD.SO_ID
        LEFT JOIN AB_SO_ORDER_DET DET ON DET.SOD_IDS = SOD.SOD_ID
        JOIN AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = HEAD.FROM_WAREHOUSE_ID
    WHERE
        DET.SOD_TYPE = 'SO SHIPMENT DET'
        AND SOD.ORG_ID = :GV_ORG_ID
    GROUP BY
        HEAD.FROM_WAREHOUSE_ID
), STOCK_TRANSFER AS(
              SELECT 
                 MAX(CASE WHEN ASR.REG_TYPE = 'WAREHOUSE' AND ASR.SR_ID = TRANS.WAREHOUSE_ID THEN ASR.REG_NAME END) AS WAREHOUSE_NAME,
                  -- C.VENDOR_NAME AS PARTY_NAME,
                   TRANS.WAREHOUSE_ID,
               --    C.WAREHOUSE_NAME AS TO_WAREHOUSE_NAME,
                  -- C.ITEM_ID ,
                  -- C.ITEM_NAME ,
                   --SUM(C.RECEIVED_BAGS) AS TRANSFER_STOCK_IN--,
                  SUM(TRANS.RECEIVED_BAGS) AS TRANSFER_STOCK_IN--,
                --   C.INV_DATE ,C.VENDOR_NAME,
                 --  C.CREATED_ON AS CREATED_ON,
                --   TRANS.CREATED_ON AS GRN_DATEEE 

             FROM TABLE(AB_GENERAL_PACKAGE.GRN_STOCK_INWARD(:GV_ORG_ID)) C
             JOIN AB_LOGISTICS_INFO_DET  TRANS ON TRANS.IDS=C.GRND_ID
         JOIN  AB_SETUP_REGISTRATION ASR ON ASR.SR_ID = TRANS.WAREHOUSE_ID
         GROUP BY 
              TRANS.WAREHOUSE_ID,
                   ASR.REG_NAME
         


                ),
                ADVANCE_SHIPMENT AS (
                                       SELECT   
                 ASD.WAREHOUSE_ID,
                 ASR.REG_NAME AS WAREHOUSE_NAME,
                SUM(ALD.NO_BAGS) AS ADVANCE_SHIPMENT_STOCK            
FROM
    AB_SO_ORDER_HEAD ASO
JOIN
    AB_SO_ORDER_DET ASD ON ASD.SO_ID = ASO.SO_ID 
JOIN
    AB_ITEMS_MASTER ITM ON ITM.ITEM_ID = ASD.ITEM_ID 
JOIN
    AB_SO_ORDER_DET ALD ON ALD.SOD_IDS = ASD.SOD_ID 
 JOIN AB_SETUP_REGISTRATION ASR ON ASR.SR_ID =  ASD.WAREHOUSE_ID   
WHERE
       ALD.SOD_TYPE = 'ASO SHIPMENT DET'
    AND ALD.ORG_ID = :GV_ORG_ID
    AND ALD.STATUS = 'Y'
    GROUP BY 
           ASD.WAREHOUSE_ID,
           ASR.REG_NAME
     


                )
SELECT 
    SD.WAREHOUSE_ID,
    SD.WAREHOUSE_NAME WAREHOUSE_NAME,
    
  -- (SD.ITEM_ID) AS ITEM_ID , 
   --(SD.ITEM_NAME) AS ITEM_NAME,
   

   --- ST.FROM_WAREHOUSE ,
   --- NVL(SUM(TR.TRANSFER_STOCK_IN),0) AS TRANSFER_IN,
    --TR.FROM_WAREHOUSE_NAME AS TO_WAREHOUSE_NAME,
   -- NVL(SUM(TR.TRANSFER_STOCK_OUT),0) AS TRANSFER_STOCK_OUT,
 --  SUM(NVL(SD.OPENING_BAGS, 0)) OVER (PARTITION BY SD.WAREHOUSE_ID) AS TOTAL_OPENING_BAGS,
    SUM(NVL(SD.OPENING_BAGS,0)) AS OPENING_BAGS,
    SUM(NVL(ST.AVAILABLE_BAGS,0)) AS TRANSFER_STOCK_IN,
    SUM(NVL(ST.AVAILABLE_BAGS,0)) AS TRANSFER_STOCK_OUT,
   SUM(NVL(SD.AMANAT_BAGS,0)) AS AMANAT_BAGS,
    SUM(NVL(AMANAT_STOCK_OUT,0)) AS AMANAT_OUT,
     SUM(NVL(SD.GRN_BAGS,0)) AS WAREHOUSE_STOCK_BAGS ,
     SUM(NVL(ST.AVAILABLE_BAGS,0)) + SUM(NVL(SD.OPENING_BAGS,0)) + SUM(NVL(SD.GRN_BAGS,0)) + SUM(NVL(SD.AMANAT_BAGS,0)) AS ALL_STOCK_TRANSFER_IN,
  ---   
    ---NVL('',0) AS AMANAT_OUT,
    SUM(COALESCE(SO.ORDER_BAGS, 0)) AS ORDER_BAGS,
    SUM(COALESCE(SB.LIFT_BAGS, 0)) AS LIFT_BAGS,
    SUM(COALESCE(SO.ORDER_BAGS, 0)) - SUM(COALESCE(SB.LIFT_BAGS, 0)) AS UNLIFT,
    SUM(COALESCE(SO.ORDER_BAGS, 0)) + SUM(NVL(ST.AVAILABLE_BAGS,0))  AS ALL_STOCK_TRANSFER_OUT,
    --------------------------------------CLOSING STOCK----------------------------------------------------------------
    (SUM(NVL(ST.AVAILABLE_BAGS,0)) + SUM(NVL(SD.OPENING_BAGS,0))+ SUM(NVL(SD.AMANAT_BAGS,0))+ SUM( NVL(SD.GRN_BAGS,0))) -   
  ---   SUM(NVL(SD.AMANAT_BAGS,0)) 
    ( SUM(COALESCE(SO.ORDER_BAGS, 0)) + SUM(NVL(ST.AVAILABLE_BAGS,0))) - (NVL(SUM(ADVANCE_SHIPMENT_STOCK),0)) AS CLOSING_BALANCE,
-----------------------------------------BALANCE ADV SHIPMENT--------------------------------------------------------------
    (SUM(NVL(ST.AVAILABLE_BAGS,0)) + SUM(NVL(SD.OPENING_BAGS,0)) + SUM(NVL(SD.AMANAT_BAGS,0)) + SUM( NVL(SD.GRN_BAGS,0))) -   
 ---   
    ( SUM(COALESCE(SO.ORDER_BAGS, 0)) + NVL(SUM(ST.AVAILABLE_BAGS),0))  AS CLOSING_STOCK ,
    NVL(SUM(ADVANCE_SHIPMENT_STOCK),0) AS ADV_SHIPMENT
    
FROM 
    STOCK_DETAIL SD
    LEFT JOIN SALE_ORDER SO ON SO.WAREHOUSE_ID = SD.WAREHOUSE_ID
    LEFT JOIN SHIPMENT_BAGS SB ON SB.WAREHOUSE_ID = SD.WAREHOUSE_ID    
    LEFT JOIN STOCK_TRANSFER TR ON TR.WAREHOUSE_ID = SD.WAREHOUSE_ID
    LEFT JOIN ADVANCE_SHIPMENT ASD ON ASD.WAREHOUSE_ID= SD.WAREHOUSE_ID
    LEFT JOIN AMANAT_OUT AMO ON AMO.WAREHOUSE_ID = SD.WAREHOUSE_ID
   --LEFT JOIN STOCK_DETAILS SDS ON SDS.WAREHOUSE_ID = SD.WAREHOUSE_ID

    LEFT JOIN    (

             WITH LOV_DATA AS (
    SELECT
        TRR.LO_ID AS TRANSFER_ID
    FROM
        AB_LOGISTICS_INFO TRR
    JOIN 
        AB_LOOKUP_DETAIL LD 
        ON LD.DET_ID IN (TRR.STOCK_TYPE, TRR.STOCK_WISE_ID) -- Ensure column references are fully qualified
    WHERE
        TRR.ORG_ID = :GV_ORG_ID
        AND TRR.LO_TYPE IN ('GRN TRANSFER', 'AMANAT TRANSFER')
    GROUP BY
        TRR.LO_ID
)
SELECT
    TRR.WAREHOUSE_ID AS WAREHOUSE_ID,
    TRR.FROM_WAREHOUSE_ID  AS FROM_WAREHOUSE_ID,

    MAX(CASE WHEN WAR.SR_ID = TRR.FROM_WAREHOUSE_ID THEN WAR.REG_NAME END) AS FROM_WAREHOUSE,
    MAX(CASE WHEN WAR.SR_ID = TRR.WAREHOUSE_ID THEN WAR.REG_NAME END) AS TO_WAREHOUSE,
    TRR.RECEIVED_BAGS AS AVAILABLE_BAGS
FROM
    AB_LOGISTICS_INFO TR
LEFT JOIN 
    AB_LOGISTICS_INFO_DET TRR 
    ON TRR.LO_ID = TR.LO_ID
LEFT JOIN 
    LOV_DATA LD 
    ON LD.TRANSFER_ID = TR.LO_ID
LEFT JOIN 
    AB_ITEMS_MASTER ITM 
    ON ITM.ITEM_ID = TRR.ITEM_IDD
LEFT JOIN 
    AB_SETUP_REGISTRATION WAR 
    ON WAR.SR_ID = TRR.FROM_WAREHOUSE_ID 
    OR WAR.SR_ID = TRR.WAREHOUSE_ID
WHERE
    TRR.DET_TYPE IN ('GRN TRANSFER DET', 'AMANAT TRANSFER DET')
    AND TRR.ORG_ID = :GV_ORG_ID
GROUP BY
   TRR.WAREHOUSE_ID,
   TRR.RECEIVED_BAGS ,
    TRR.FROM_WAREHOUSE_ID 



    )  ST
          ON ST.WAREHOUSE_ID = SD.WAREHOUSE_ID
        --  AND ST.FROM_WAREHOUSE_ID = ST.WAREHOUSE_ID


  
       WHERE 
            SD.WAREHOUSE_ID = NVL(:P209_WAREHOUSE_NAME,SD.WAREHOUSE_ID)
        AND SD.ITEM_ID = NVL(:P209_PRODUCT_NAME, SD.ITEM_ID)
        AND  TRUNC(SD.CREATED_ON) BETWEEN NVL(TO_DATE(:P209_FROM_DATE, 'DD-MON-YYYY'), TRUNC(SYSDATE)) 
        AND NVL(TO_DATE(:P209_TO_DATE, 'DD-MON-YYYY'), TRUNC(SYSDATE) )

    GROUP BY 
    SD.WAREHOUSE_ID,
   SD.WAREHOUSE_NAME
  
--   SD.ITEM_ID,
--    SD.ITEM_NAME
